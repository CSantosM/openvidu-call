name: OpenVidu Call CI/CD
on:
  schedule: # default branch (master)
    - cron: '0 0 * * *'
  push:
    branches:
      - master
      - 'feature/**'
  pull_request:
    branches:
      - master
  release:
    types: [created]

jobs:

  unit_test:
    name: Run unit tests with Karma and Jasmine
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Cache multiple paths
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Remove package-lock
      run: rm openvidu-call-front/package-lock.json
    - name: Install dependencies
      run: npm install --prefix openvidu-call-front
    - name: Run unit tests
      run: npm run test --prefix openvidu-call-front


  e2e_test:
    name: E2E test
    runs-on: ubuntu-latest
    if: github.ref != 'feature/**' && github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Running E2E test
      run: echo "TODO E2E test"

  qa_sonar:
    name: QA and Security with Sonar
    runs-on: ubuntu-latest
    if: github.ref != 'feature/**' && github.event_name != 'pull_request'
    steps:
    - name: QA Sonar
      run: echo "TODO Sonar"

  build_prod:
    name: Build for production
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'release'
    needs: [unit_test, e2e_test, qa_sonar]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Build OpenVidu Call
      run: |
        npm install --prefix openvidu-call-front
        npm run build-prod --prefix openvidu-call-front
        npm i --prefix openvidu-call-back
        npm run build --prefix openvidu-call-back

  # release:
  #   name: Deploy release
  #   if: github.event_name == 'release'
  #   runs-on: ubuntu-latest
  #   needs: [build_prod]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Preparing artifact
  #     run: |
  #       mkdir release && cp openvidu-call-back/dist/ -r release
  #       tar czf release/openvidu-call-${{github.ref}}.tar.gz *
  #   - name: Deploy release
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: Deploying artifact
  #       path: release/openvidu-call-${{github.ref}}.tar.gz

  # nightly:
  #   name: Deploy nightly
  #   if: github.event_name == 'schedule'
  #   runs-on: ubuntu-latest
  #   needs: [build_prod]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Getting timestamp
  #     id : time
  #   - uses: nanzm/get-time-action@v1.0
  #     with:
  #       timeZone: 8
  #       format: 'YYYY-MM-DD-HH-mm-ss'
  #   - name: Preparing artifact
  #     run: |
  #       mkdir release && cp openvidu-call-back/dist/ -r release
  #       tar czf release/openvidu-call-${{ steps.time.outputs.time }}.tar.gz *
  #   - name: Deploy nightly
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: Deploying artifact
  #       path: release/openvidu-call-${{ steps.time.outputs.time }}.tar.gz
