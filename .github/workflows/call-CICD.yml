name: OpenVidu Call CI/CD
on:
  schedule: # default branch (master)
    - cron: '0 23 * * *'
  push:
    branches:
      - master
      - 'feature/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:

  unit_test:
    name: Unit test
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Cache multiple paths
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Remove package-lock
      run: rm openvidu-call-front/package-lock.json
    - name: Install dependencies
      run: npm install --prefix openvidu-call-front
    - name: Run unit tests
      run: npm run test --prefix openvidu-call-front


  e2e_test:
    name: E2E test
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v2
    - name: Install ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install libsqlite3-dev chromium-driver google-chrome-stable
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Cache multiple paths
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
    - name: Start OpenVidu
      run: docker run -p 4443:4443 --rm -d -e OPENVIDU_SECRET=MY_SECRET openvidu/openvidu-server-kms:2.14.0
    - name: Install dependencies
      run: |
        npm install --prefix openvidu-call-front
        npm i --prefix openvidu-call-back
    - name: Start OpenVidu Call back
      run: npm start --prefix openvidu-call-back &
    - name: Running E2E test
      run: npm run e2e --prefix openvidu-call-front

  sonarcloud:
    name: QA and Security with Sonar
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'schedule' || github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  nightly:
    name: Deploy nightly
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [unit_test, e2e_test, sonarcloud]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: Getting timestamp
      id : time
      uses: nanzm/get-time-action@v1.0
      with:
        timeZone: 8
        format: 'YYYY-MM-DD-HH-mm-ss'
    - name: Build OpenVidu Call front
      run: |
        npm install --prefix openvidu-call-front
        npm run build-prod --prefix openvidu-call-front
    - name: Build OpenVidu Call back
      run: |
        npm i --prefix openvidu-call-back
        npm run build --prefix openvidu-call-back
        mkdir release && cp openvidu-call-back/dist/ -r release
    - uses: actions/upload-artifact@v2
      with:
        name: openvidu-call-${{ steps.time.outputs.time }}
        path: release

  release:
    name: Deploy release
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    needs: [unit_test, e2e_test, sonarcloud]
    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Registry
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    - name: Building and publishing docker image in Docker Hub
      run: |
        cd docker
        chmod +x run.sh
        sh run.sh ${GITHUB_REF#refs/tags/}